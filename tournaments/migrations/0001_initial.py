# Generated by Django 5.1.1 on 2025-07-15 16:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('quiz', '0006_quizattempt_guest_user_alter_quizattempt_user'),
        ('user', '0007_useropenaccount_user'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Name of the tournament.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the tournament.')),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom')], default='custom', help_text='Defines the recurrence or custom duration of the tournament.', max_length=50)),
                ('start_date', models.DateTimeField(help_text='The date and time when the tournament begins.')),
                ('end_date', models.DateTimeField(help_text='The date and time when the tournament ends.')),
                ('max_total_attempts', models.PositiveIntegerField(blank=True, help_text='Maximum number of times a user can attempt the tournament in total. Leave blank for unlimited.', null=True)),
                ('max_questions_per_attempt', models.PositiveIntegerField(default=10, help_text='Maximum number of questions a user will face in a single attempt.')),
                ('max_attempts_per_day', models.PositiveIntegerField(default=1, help_text='Maximum number of times a user can attempt this tournament in a single day.')),
                ('negative_marking', models.FloatField(default=0, help_text='Specify the negative marking value for incorrect answers in this tournament. Default is 0.')),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Maximum time allowed for completing each attempt in minutes (0 for no limit).')),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('finished', 'Finished'), ('archived', 'Archived')], default='upcoming', help_text='Current administrative status of the tournament.', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('questions', models.ManyToManyField(blank=True, help_text='The pool of questions from which users will be tested.', related_name='tournaments', to='quiz.question')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TournamentPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prize_type', models.CharField(choices=[('daily', 'Daily Prize'), ('weekly', 'Weekly Prize'), ('overall', 'Overall Prize')], help_text='Whether this prize is for daily, weekly, or overall winners.', max_length=10)),
                ('rank', models.PositiveIntegerField(default=1, help_text='Which rank this prize is for (e.g., 1 for first place, 2 for second place).')),
                ('title', models.CharField(help_text='Name or title of the prize (e.g., Mobile Recharge, Smartwatch).', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Details about the prize.')),
                ('value', models.DecimalField(blank=True, decimal_places=2, help_text='Optional monetary value of the prize (e.g., 500.00 for BDT 500).', max_digits=10, null=True)),
                ('tournament', models.ForeignKey(help_text='The tournament this prize belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Tournament Prize',
                'verbose_name_plural': 'Tournament Prizes',
                'ordering': ['prize_type', 'rank'],
                'unique_together': {('tournament', 'prize_type', 'rank')},
            },
        ),
        migrations.CreateModel(
            name='TournamentAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0, help_text='The score achieved in this attempt.')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Number of questions answered correctly.')),
                ('wrong_answers', models.PositiveIntegerField(default=0, help_text='Number of questions answered incorrectly.')),
                ('skipped_questions', models.PositiveIntegerField(default=0, help_text='Number of questions skipped.')),
                ('attempt_date', models.DateTimeField(auto_now_add=True, help_text='The date and time when this attempt was made.')),
                ('end_time', models.DateTimeField(blank=True, help_text='The date and time when the attempt was completed/submitted.', null=True)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Total time taken by the user to complete the attempt in seconds (0 if not timed).')),
                ('is_completed', models.BooleanField(default=False, help_text='Indicates if the user finished the attempt (true) or abandoned it (false).')),
                ('guest_user', models.ForeignKey(blank=True, help_text='The guest user who made this attempt (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.useropenaccount')),
                ('questions_attempted', models.ManyToManyField(help_text='The specific questions presented and attempted in this quiz round.', related_name='tournament_attempts_by_question', to='quiz.question')),
                ('tournament', models.ForeignKey(help_text='The tournament this attempt belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='tournaments.tournament')),
                ('user', models.ForeignKey(blank=True, help_text='The authenticated user who made this attempt (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Attempt',
                'verbose_name_plural': 'Tournament Attempts',
                'ordering': ['-attempt_date'],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('guest_user__isnull', True), ('user__isnull', False)), models.Q(('guest_user__isnull', False), ('user__isnull', True)), _connector='OR'), name='either_user_or_guest_user_for_tournament_attempt')],
            },
        ),
        migrations.CreateModel(
            name='TournamentLeaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField(default=0, help_text='The best (highest) score achieved by the user in this tournament across all valid attempts.')),
                ('last_daily_score', models.FloatField(default=0, help_text='The highest score achieved by the user on the last day they participated.')),
                ('last_daily_update', models.DateField(blank=True, help_text='The date of the last update to last_daily_score, useful for daily winner checks.', null=True)),
                ('last_attempt_datetime', models.DateTimeField(blank=True, help_text="The datetime of the attempt that resulted in the current 'total_score' or the latest completed attempt.", null=True)),
                ('guest_user', models.ForeignKey(blank=True, help_text='The guest user on the leaderboard (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.useropenaccount')),
                ('tournament', models.ForeignKey(help_text='The tournament for which this leaderboard entry exists.', on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='tournaments.tournament')),
                ('user', models.ForeignKey(blank=True, help_text='The authenticated user on the leaderboard (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Leaderboard Entry',
                'verbose_name_plural': 'Tournament Leaderboard Entries',
                'ordering': ['-total_score', 'last_attempt_datetime'],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('guest_user__isnull', True), ('user__isnull', False)), models.Q(('guest_user__isnull', False), ('user__isnull', True)), _connector='OR'), name='either_user_or_guest_user_for_tournament_leaderboard')],
                'unique_together': {('user', 'guest_user', 'tournament')},
            },
        ),
        migrations.CreateModel(
            name='TournamentWinner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winning_score', models.FloatField(help_text='The score of the winner at the time of winning the prize.')),
                ('winning_rank', models.PositiveIntegerField(help_text='The rank of the winner at the time of winning the prize.')),
                ('award_date', models.DateTimeField(auto_now_add=True, help_text='The date and time the prize was awarded/determined.')),
                ('claim_status', models.CharField(choices=[('pending', 'Pending Claim'), ('claimed', 'Claimed by Winner'), ('distributed', 'Prize Distributed'), ('unclaimed', 'Unclaimed/Expired')], default='pending', help_text='Status of the prize claim and distribution.', max_length=20)),
                ('guest_user', models.ForeignKey(blank=True, help_text='The guest user who won the prize (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.useropenaccount')),
                ('prize', models.ForeignKey(blank=True, help_text='The specific prize that was awarded.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournaments.tournamentprize')),
                ('tournament', models.ForeignKey(help_text='The tournament where the prize was won.', on_delete=django.db.models.deletion.CASCADE, related_name='winners', to='tournaments.tournament')),
                ('user', models.ForeignKey(blank=True, help_text='The authenticated user who won the prize (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Winner',
                'verbose_name_plural': 'Tournament Winners',
                'ordering': ['-award_date'],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('guest_user__isnull', True), ('user__isnull', False)), models.Q(('guest_user__isnull', False), ('user__isnull', True)), _connector='OR'), name='either_user_or_guest_user_for_winner')],
                'unique_together': {('tournament', 'prize', 'user', 'guest_user')},
            },
        ),
    ]
